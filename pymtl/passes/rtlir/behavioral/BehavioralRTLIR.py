#=========================================================================
# BehavioralRTLIR.py
#=========================================================================
# This file contains the definition of all BehavioralRTLIR constructs.
# This file is automatically generated by BehavioralRTLIRImplGen.py.

class BaseBehavioralRTLIR( object ):
  def __init__( s ):
    pass

class CombUpblk( BaseBehavioralRTLIR ):
  def __init__( s, name, body ):
    s.name = name
    s.body = body

  def __eq__( s, other ):
    if type( s ) != type( other ):
      return False
    if s.name != other.name:
      return False
    for x, y in zip( s.body, other.body ):
      if x != y:
        return False
    return True

  def __ne__( s, other ):
    return not s.__eq__( other )

class SeqUpblk( BaseBehavioralRTLIR ):
  def __init__( s, name, body ):
    s.name = name
    s.body = body

  def __eq__( s, other ):
    if type( s ) != type( other ):
      return False
    if s.name != other.name:
      return False
    for x, y in zip( s.body, other.body ):
      if x != y:
        return False
    return True

  def __ne__( s, other ):
    return not s.__eq__( other )

class Assign( BaseBehavioralRTLIR ):
  def __init__( s, target, value ):
    s.target = target
    s.value = value

  def __eq__( s, other ):
    if type( s ) != type( other ):
      return False
    if s.target != other.target:
      return False
    if s.value != other.value:
      return False
    return True

  def __ne__( s, other ):
    return not s.__eq__( other )

class AugAssign( BaseBehavioralRTLIR ):
  def __init__( s, target, op, value ):
    s.target = target
    s.op = op
    s.value = value

  def __eq__( s, other ):
    if type( s ) != type( other ):
      return False
    if s.target != other.target:
      return False
    if s.op != other.op:
      return False
    if s.value != other.value:
      return False
    return True

  def __ne__( s, other ):
    return not s.__eq__( other )

class If( BaseBehavioralRTLIR ):
  def __init__( s, cond, body, orelse ):
    s.cond = cond
    s.body = body
    s.orelse = orelse

  def __eq__( s, other ):
    if type( s ) != type( other ):
      return False
    if s.cond != other.cond:
      return False
    for x, y in zip( s.body, other.body ):
      if x != y:
        return False
    for x, y in zip( s.orelse, other.orelse ):
      if x != y:
        return False
    return True

  def __ne__( s, other ):
    return not s.__eq__( other )

class For( BaseBehavioralRTLIR ):
  def __init__( s, var, start, end, step, body ):
    s.var = var
    s.start = start
    s.end = end
    s.step = step
    s.body = body

  def __eq__( s, other ):
    if type( s ) != type( other ):
      return False
    if s.var != other.var:
      return False
    if s.start != other.start:
      return False
    if s.end != other.end:
      return False
    if s.step != other.step:
      return False
    for x, y in zip( s.body, other.body ):
      if x != y:
        return False
    return True

  def __ne__( s, other ):
    return not s.__eq__( other )

class Number( BaseBehavioralRTLIR ):
  def __init__( s, value ):
    s.value = value

  def __eq__( s, other ):
    if type( s ) != type( other ):
      return False
    if s.value != other.value:
      return False
    return True

  def __ne__( s, other ):
    return not s.__eq__( other )

class BitsCast( BaseBehavioralRTLIR ):
  def __init__( s, nbits, value ):
    s.nbits = nbits
    s.value = value

  def __eq__( s, other ):
    if type( s ) != type( other ):
      return False
    if s.nbits != other.nbits:
      return False
    if s.value != other.value:
      return False
    return True

  def __ne__( s, other ):
    return not s.__eq__( other )

class StructInst( BaseBehavioralRTLIR ):
  def __init__( s, struct, keywords, kwargs ):
    s.struct = struct
    s.keywords = keywords
    s.kwargs = kwargs

  def __eq__( s, other ):
    if type( s ) != type( other ):
      return False
    if s.struct != other.struct:
      return False
    for x, y in zip( s.keywords, other.keywords ):
      if x != y:
        return False
    for x, y in zip( s.kwargs, other.kwargs ):
      if x != y:
        return False
    return True

  def __ne__( s, other ):
    return not s.__eq__( other )

class IfExp( BaseBehavioralRTLIR ):
  def __init__( s, cond, body, orelse ):
    s.cond = cond
    s.body = body
    s.orelse = orelse

  def __eq__( s, other ):
    if type( s ) != type( other ):
      return False
    if s.cond != other.cond:
      return False
    if s.body != other.body:
      return False
    if s.orelse != other.orelse:
      return False
    return True

  def __ne__( s, other ):
    return not s.__eq__( other )

class UnaryOp( BaseBehavioralRTLIR ):
  def __init__( s, op, operand ):
    s.op = op
    s.operand = operand

  def __eq__( s, other ):
    if type( s ) != type( other ):
      return False
    if s.op != other.op:
      return False
    if s.operand != other.operand:
      return False
    return True

  def __ne__( s, other ):
    return not s.__eq__( other )

class BoolOp( BaseBehavioralRTLIR ):
  def __init__( s, op, values ):
    s.op = op
    s.values = values

  def __eq__( s, other ):
    if type( s ) != type( other ):
      return False
    if s.op != other.op:
      return False
    for x, y in zip( s.values, other.values ):
      if x != y:
        return False
    return True

  def __ne__( s, other ):
    return not s.__eq__( other )

class BinOp( BaseBehavioralRTLIR ):
  def __init__( s, left, op, right ):
    s.left = left
    s.op = op
    s.right = right

  def __eq__( s, other ):
    if type( s ) != type( other ):
      return False
    if s.left != other.left:
      return False
    if s.op != other.op:
      return False
    if s.right != other.right:
      return False
    return True

  def __ne__( s, other ):
    return not s.__eq__( other )

class Compare( BaseBehavioralRTLIR ):
  def __init__( s, left, op, right ):
    s.left = left
    s.op = op
    s.right = right

  def __eq__( s, other ):
    if type( s ) != type( other ):
      return False
    if s.left != other.left:
      return False
    if s.op != other.op:
      return False
    if s.right != other.right:
      return False
    return True

  def __ne__( s, other ):
    return not s.__eq__( other )

class Attribute( BaseBehavioralRTLIR ):
  def __init__( s, value, attr ):
    s.value = value
    s.attr = attr

  def __eq__( s, other ):
    if type( s ) != type( other ):
      return False
    if s.value != other.value:
      return False
    if s.attr != other.attr:
      return False
    return True

  def __ne__( s, other ):
    return not s.__eq__( other )

class Index( BaseBehavioralRTLIR ):
  def __init__( s, value, idx ):
    s.value = value
    s.idx = idx

  def __eq__( s, other ):
    if type( s ) != type( other ):
      return False
    if s.value != other.value:
      return False
    if s.idx != other.idx:
      return False
    return True

  def __ne__( s, other ):
    return not s.__eq__( other )

class Slice( BaseBehavioralRTLIR ):
  def __init__( s, value, lower, upper ):
    s.value = value
    s.lower = lower
    s.upper = upper

  def __eq__( s, other ):
    if type( s ) != type( other ):
      return False
    if s.value != other.value:
      return False
    if s.lower != other.lower:
      return False
    if s.upper != other.upper:
      return False
    return True

  def __ne__( s, other ):
    return not s.__eq__( other )

class Base( BaseBehavioralRTLIR ):
  def __init__( s, base ):
    s.base = base

  def __eq__( s, other ):
    if type( s ) != type( other ):
      return False
    if s.base != other.base:
      return False
    return True

  def __ne__( s, other ):
    return not s.__eq__( other )

class LoopVar( BaseBehavioralRTLIR ):
  def __init__( s, name ):
    s.name = name

  def __eq__( s, other ):
    if type( s ) != type( other ):
      return False
    if s.name != other.name:
      return False
    return True

  def __ne__( s, other ):
    return not s.__eq__( other )

class FreeVar( BaseBehavioralRTLIR ):
  def __init__( s, name, obj ):
    s.name = name
    s.obj = obj

  def __eq__( s, other ):
    if type( s ) != type( other ):
      return False
    if s.name != other.name:
      return False
    if s.obj != other.obj:
      return False
    return True

  def __ne__( s, other ):
    return not s.__eq__( other )

class TmpVar( BaseBehavioralRTLIR ):
  def __init__( s, name ):
    s.name = name

  def __eq__( s, other ):
    if type( s ) != type( other ):
      return False
    if s.name != other.name:
      return False
    return True

  def __ne__( s, other ):
    return not s.__eq__( other )

class LoopVarDecl( BaseBehavioralRTLIR ):
  def __init__( s, name ):
    s.name = name

  def __eq__( s, other ):
    if type( s ) != type( other ):
      return False
    if s.name != other.name:
      return False
    return True

  def __ne__( s, other ):
    return not s.__eq__( other )

class Invert( BaseBehavioralRTLIR ):
  def __init__( s ):
    pass

  def __eq__( s, other ):
    if type( s ) != type( other ):
      return False
    return True

  def __ne__( s, other ):
    return not s.__eq__( other )

class Not( BaseBehavioralRTLIR ):
  def __init__( s ):
    pass

  def __eq__( s, other ):
    if type( s ) != type( other ):
      return False
    return True

  def __ne__( s, other ):
    return not s.__eq__( other )

class UAdd( BaseBehavioralRTLIR ):
  def __init__( s ):
    pass

  def __eq__( s, other ):
    if type( s ) != type( other ):
      return False
    return True

  def __ne__( s, other ):
    return not s.__eq__( other )

class USub( BaseBehavioralRTLIR ):
  def __init__( s ):
    pass

  def __eq__( s, other ):
    if type( s ) != type( other ):
      return False
    return True

  def __ne__( s, other ):
    return not s.__eq__( other )

class And( BaseBehavioralRTLIR ):
  def __init__( s ):
    pass

  def __eq__( s, other ):
    if type( s ) != type( other ):
      return False
    return True

  def __ne__( s, other ):
    return not s.__eq__( other )

class Or( BaseBehavioralRTLIR ):
  def __init__( s ):
    pass

  def __eq__( s, other ):
    if type( s ) != type( other ):
      return False
    return True

  def __ne__( s, other ):
    return not s.__eq__( other )

class Add( BaseBehavioralRTLIR ):
  def __init__( s ):
    pass

  def __eq__( s, other ):
    if type( s ) != type( other ):
      return False
    return True

  def __ne__( s, other ):
    return not s.__eq__( other )

class Sub( BaseBehavioralRTLIR ):
  def __init__( s ):
    pass

  def __eq__( s, other ):
    if type( s ) != type( other ):
      return False
    return True

  def __ne__( s, other ):
    return not s.__eq__( other )

class Mult( BaseBehavioralRTLIR ):
  def __init__( s ):
    pass

  def __eq__( s, other ):
    if type( s ) != type( other ):
      return False
    return True

  def __ne__( s, other ):
    return not s.__eq__( other )

class Div( BaseBehavioralRTLIR ):
  def __init__( s ):
    pass

  def __eq__( s, other ):
    if type( s ) != type( other ):
      return False
    return True

  def __ne__( s, other ):
    return not s.__eq__( other )

class Mod( BaseBehavioralRTLIR ):
  def __init__( s ):
    pass

  def __eq__( s, other ):
    if type( s ) != type( other ):
      return False
    return True

  def __ne__( s, other ):
    return not s.__eq__( other )

class Pow( BaseBehavioralRTLIR ):
  def __init__( s ):
    pass

  def __eq__( s, other ):
    if type( s ) != type( other ):
      return False
    return True

  def __ne__( s, other ):
    return not s.__eq__( other )

class ShiftLeft( BaseBehavioralRTLIR ):
  def __init__( s ):
    pass

  def __eq__( s, other ):
    if type( s ) != type( other ):
      return False
    return True

  def __ne__( s, other ):
    return not s.__eq__( other )

class ShiftRightLogic( BaseBehavioralRTLIR ):
  def __init__( s ):
    pass

  def __eq__( s, other ):
    if type( s ) != type( other ):
      return False
    return True

  def __ne__( s, other ):
    return not s.__eq__( other )

class BitAnd( BaseBehavioralRTLIR ):
  def __init__( s ):
    pass

  def __eq__( s, other ):
    if type( s ) != type( other ):
      return False
    return True

  def __ne__( s, other ):
    return not s.__eq__( other )

class BitOr( BaseBehavioralRTLIR ):
  def __init__( s ):
    pass

  def __eq__( s, other ):
    if type( s ) != type( other ):
      return False
    return True

  def __ne__( s, other ):
    return not s.__eq__( other )

class BitXor( BaseBehavioralRTLIR ):
  def __init__( s ):
    pass

  def __eq__( s, other ):
    if type( s ) != type( other ):
      return False
    return True

  def __ne__( s, other ):
    return not s.__eq__( other )

class Eq( BaseBehavioralRTLIR ):
  def __init__( s ):
    pass

  def __eq__( s, other ):
    if type( s ) != type( other ):
      return False
    return True

  def __ne__( s, other ):
    return not s.__eq__( other )

class NotEq( BaseBehavioralRTLIR ):
  def __init__( s ):
    pass

  def __eq__( s, other ):
    if type( s ) != type( other ):
      return False
    return True

  def __ne__( s, other ):
    return not s.__eq__( other )

class Lt( BaseBehavioralRTLIR ):
  def __init__( s ):
    pass

  def __eq__( s, other ):
    if type( s ) != type( other ):
      return False
    return True

  def __ne__( s, other ):
    return not s.__eq__( other )

class LtE( BaseBehavioralRTLIR ):
  def __init__( s ):
    pass

  def __eq__( s, other ):
    if type( s ) != type( other ):
      return False
    return True

  def __ne__( s, other ):
    return not s.__eq__( other )

class Gt( BaseBehavioralRTLIR ):
  def __init__( s ):
    pass

  def __eq__( s, other ):
    if type( s ) != type( other ):
      return False
    return True

  def __ne__( s, other ):
    return not s.__eq__( other )

class GtE( BaseBehavioralRTLIR ):
  def __init__( s ):
    pass

  def __eq__( s, other ):
    if type( s ) != type( other ):
      return False
    return True

  def __ne__( s, other ):
    return not s.__eq__( other )

#-------------------------------------------------------------------------
# BehavioralRTLIR visitor
#-------------------------------------------------------------------------

class BehavioralRTLIRNodeVisitor( object ):
  # This visitor uses the same code as the Python AST node visitor
  def visit( self, node, *args ):
    method = 'visit_' + node.__class__.__name__
    visitor = getattr( self, method, self.generic_visit )
    return visitor( node, *args )

  def generic_visit( self, node, *args ):
    for field in node.__dict__.keys():
      value = node.__dict__[ field ]
      if isinstance( value, list ):
        for item in value:
          if isinstance( item, BaseBehavioralRTLIR ):
            self.visit( item, *args )
      elif isinstance( value, BaseBehavioralRTLIR ):
        self.visit( value, *args )
